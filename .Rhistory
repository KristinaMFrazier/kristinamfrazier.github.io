knitr::opts_chunk$set(echo=T, include=T, warning=F, message=F)
library(tidyverse)
library(car)
library(klaR)
library(lmtest)
library(car)
library(ROCR)
library(MASS)
library(tree)
library(randomForest)
churn <- read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')
# look at NA values - might be able to compute regression model to impute those values
glimpse(churn)
# Removes 21 observations
churn <- na.omit(churn)
glimpse(churn)
summary(churn)
table(churn$Churn)
# Select character variables
names(churn)[map_lgl(churn, is.character)]
# create a vector of character variables
char_vars <- c("gender","Partner","Dependents","PhoneService","MultipleLines","InternetService","OnlineSecurity","OnlineBackup","DeviceProtection","TechSupport","StreamingTV","StreamingMovies","Contract","PaperlessBilling","PaymentMethod")
for (var in char_vars) {
print(var)
print(table(churn[[var]]))
}
table(churn$gender,churn$Churn)
chisq.test(table(churn$gender,churn$Churn))
ggplot(churn, aes(x = factor(gender), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by Gender", x = "Gender", y = "Proportion")
table(churn$SeniorCitizen,churn$Churn)
chisq.test(table(churn$SeniorCitizen,churn$Churn))
ggplot(churn, aes(x = factor(SeniorCitizen), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by SeniorCitizen Status", x = "SeniorCitizen", y = "Proportion")
table(churn$Partner,churn$Churn)
chisq.test(table(churn$Partner,churn$Churn))
ggplot(churn, aes(x = factor(Partner), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by Partner Status", x = "Partner", y = "Proportion")
table(churn$Dependents,churn$Churn)
chisq.test(table(churn$Dependents,churn$Churn))
ggplot(churn, aes(x = factor(Dependents), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by Dependents", x = "Dependents", y = "Proportion")
table(churn$PhoneService,churn$Churn)
chisq.test(table(churn$PhoneService,churn$Churn))
ggplot(churn, aes(x = factor(PhoneService), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by PhoneService", x = "PhoneService", y = "Proportion")
table(churn$MultipleLines,churn$Churn)
chisq.test(table(churn$MultipleLines,churn$Churn))
ggplot(churn, aes(x = factor(MultipleLines), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by MultipleLines", x = "MultipleLines", y = "Proportion")
table(churn$InternetService,churn$Churn)
chisq.test(table(churn$InternetService,churn$Churn))
ggplot(churn, aes(x = factor(InternetService), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by InternetService", x = "InternetService", y = "Proportion")
table(churn$OnlineSecurity,churn$Churn)
chisq.test(table(churn$OnlineSecurity,churn$Churn))
ggplot(churn, aes(x = factor(OnlineSecurity), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by OnlineSecurity", x = "OnlineSecurity", y = "Proportion")
table(churn$OnlineBackup,churn$Churn)
chisq.test(table(churn$OnlineBackup,churn$Churn))
ggplot(churn, aes(x = factor(OnlineBackup), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by OnlineBackup", x = "OnlineBackup", y = "Proportion")
table(churn$DeviceProtection,churn$Churn)
chisq.test(table(churn$DeviceProtection,churn$Churn))
ggplot(churn, aes(x = factor(DeviceProtection), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by DeviceProtection", x = "DeviceProtection", y = "Proportion")
table(churn$TechSupport,churn$Churn)
chisq.test(table(churn$TechSupport,churn$Churn))
ggplot(churn, aes(x = factor(TechSupport), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by TechSupport", x = "TechSupport", y = "Proportion")
table(churn$StreamingTV,churn$Churn)
chisq.test(table(churn$StreamingTV,churn$Churn))
ggplot(churn, aes(x = factor(StreamingTV), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by StreamingTV", x = "StreamingTV", y = "Proportion")
table(churn$StreamingMovies,churn$Churn)
chisq.test(table(churn$StreamingMovies,churn$Churn))
ggplot(churn, aes(x = factor(StreamingMovies), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by StreamingMovies", x = "StreamingMovies", y = "Proportion")
table(churn$Contract,churn$Churn)
chisq.test(table(churn$Contract,churn$Churn))
ggplot(churn, aes(x = factor(Contract), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by Contract", x = "Contract", y = "Proportion")
table(churn$PaperlessBilling,churn$Churn)
chisq.test(table(churn$PaperlessBilling,churn$Churn))
ggplot(churn, aes(x = factor(PaperlessBilling), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by PaperlessBilling", x = "PaperlessBilling", y = "Proportion")
table(churn$PaymentMethod,churn$Churn)
chisq.test(table(churn$PaymentMethod,churn$Churn))
ggplot(churn, aes(x = factor(PaymentMethod), fill = factor(Churn))) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by PaymentMethod", x = "PaymentMethod", y = "Proportion")
boxplot(MonthlyCharges~Churn, data = churn)
boxplot(tenure~Churn, data = churn)
boxplot(TotalCharges~Churn, data = churn)
par(mfrow=c(2,3))
hist(churn$MonthlyCharges)
hist(churn$tenure)
hist(churn$TotalCharges)
hist(log(churn$MonthlyCharges))
hist(log(churn$tenure))
hist(log(churn$TotalCharges))
# Fit an initial model to further determine variable significance.
churn$Churn <- ifelse(churn$Churn == 'Yes',1,0)
churn.fit <- glm(Churn~.-customerID,family=binomial(link="logit"),data = churn)
summary(churn.fit)
require(coefplot)
coefplot(churn.fit)
churn.fit.reduced <- glm(Churn~SeniorCitizen+tenure+MultipleLines+InternetService+Contract+PaperlessBilling+PaymentMethod+TotalCharges,family=binomial(link="logit"),data = churn)
summary(churn.fit.reduced)
# Xs are independent (uncorrelated)
cond.index(churn.fit, data=churn)
cond.index(churn.fit.reduced, data=churn)
vif(churn.fit.reduced)
plot(churn.fit.reduced, which = 3)
plot(churn.fit.reduced, which = 4)
churn[c(269,4266,4812),c("SeniorCitizen","tenure","MultipleLines","InternetService","Contract","PaperlessBilling","PaymentMethod","TotalCharges")]
summary(churn[,c("SeniorCitizen","tenure","MultipleLines","InternetService","Contract","PaperlessBilling","PaymentMethod","TotalCharges")])
summary(churn[,c('tenure','TotalCharges')])
par(mfrow=c(1,2))
churn.fit.num <- glm(Churn~tenure+TotalCharges,family=binomial(link="logit"), data = churn)
log.odds <- predict(churn.fit.num, type = "link")
plot(churn$tenure,log.odds)
plot(churn$TotalCharges,log.odds)
odds <- exp(log.odds)
probabilities <- odds/(1+odds)
churn.null <- glm(Churn~1,family=binomial(link="logit"),data = churn)
# Because there are so many variables, we can afford to be restrictive on variable selection
k <- qchisq(0.01, 1, lower.tail=F)
churn.stepwise <- step(churn.fit,
scope=list(lower = churn.null,upper = churn.fit),
direction="both",test="F",
k = k)
summary(churn.stepwise)
churn.stepwise$call
churn.fit.reduced$call
# Remove streaming movies
churn.stepwise.1 <- glm(formula = Churn ~ SeniorCitizen + tenure + MultipleLines +
InternetService + OnlineSecurity + TechSupport +
Contract + PaperlessBilling + PaymentMethod + TotalCharges,
family = binomial(link = "logit"), data = churn)
# Remove streaming movies, TechSupport
churn.stepwise.2 <- glm(formula = Churn ~ SeniorCitizen + tenure + MultipleLines +
InternetService + OnlineSecurity +
Contract + PaperlessBilling + PaymentMethod + TotalCharges,
family = binomial(link = "logit"), data = churn)
anova(churn.fit.reduced,churn.stepwise.2,churn.stepwise.1,churn.stepwise)
cond.index(churn.stepwise, data=churn)
cond.index(churn.stepwise.1, data=churn)
cond.index(churn.stepwise.2, data=churn)
cond.index(churn.fit.reduced, data=churn)
churn.logreg <- glm(Churn~SeniorCitizen+tenure+MultipleLines+InternetService+Contract+PaperlessBilling+PaymentMethod+TotalCharges,
family=binomial(link="logit"),
data = churn)
summary(churn.logreg)
broom::tidy(churn.logreg)
log.odds <- coef(churn.logreg)
odds <- exp(coef(churn.logreg))
prob <- odds/(1+odds)
cbind(log.odds, odds, prob)
set.seed(1)
n <- nrow(churn)
train <- sample(n,n*0.60)
churn.logreg.linear.train <- glm(Churn ~ SeniorCitizen + tenure + MultipleLines + InternetService + Contract + PaperlessBilling + PaymentMethod + TotalCharges,
family=binomial(link="logit"),
data = churn[train,])
probs <- predict(churn.logreg.linear.train, churn[-train,], type = "response")
# Lowered the threshold manually to 0.35 just by trial and error
preds <- ifelse(probs>0.35, 1, 0)
conf.mat <- table(preds, churn$Churn[-train])
TruN=conf.mat[1,1] # True negatives, row 1 col 1
TruP=conf.mat[2,2] # True positives, row 2 col 2
FalP=conf.mat[2,1] # False positives, etc.
FalN=conf.mat[1,2] # False negatives
TotN=conf.mat[1,1] + conf.mat[2,1] # Total negatives
TotP=conf.mat[1,2] + conf.mat[2,2] # Total positives
Tot=TotN+TotP # Matrix total
Accuracy=(TruN+TruP)/Tot
Error=(FalN+FalP)/Tot
Sensitivity=TruP/TotP # Proportion of correct positives
Specificity=TruN/TotN # Proportion of correct negatives
FalPos = 1 - Specificity
print(c("Accuracy"=Accuracy,
"Error"=Error,
"Sensitivity"=Sensitivity,
"Specificity"=Specificity,
"False Positives"=FalPos), digits=2) # Prints fewer digits
logreg.linear.rates <- c("Accuracy"=Accuracy,
"Error"=Error,
"Sensitivity"=Sensitivity,
"Specificity"=Specificity,
"False Positives"=FalPos)
pred <- prediction(preds,churn$Churn[-train])
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=T)
auc <- performance(pred,"auc")
c(auc@y.name[[1]], auc@y.values[[1]])
churn.lda <- lda(Churn ~ SeniorCitizen + tenure + MultipleLines + InternetService + Contract + PaperlessBilling + PaymentMethod + TotalCharges,
data = churn[train,])
preds <- predict(churn.lda,churn[-train,])$posterior[,2]
preds <- ifelse(preds > 0.35, 1, 0)
conf.mat <- table(preds, churn$Churn[-train])
TruN=conf.mat[1,1] # True negatives, row 1 col 1
TruP=conf.mat[2,2] # True positives, row 2 col 2
FalP=conf.mat[2,1] # False positives, etc.
FalN=conf.mat[1,2] # False negatives
TotN=conf.mat[1,1] + conf.mat[2,1] # Total negatives
TotP=conf.mat[1,2] + conf.mat[2,2] # Total positives
Tot=TotN+TotP # Matrix total
Accuracy=(TruN+TruP)/Tot
Error=(FalN+FalP)/Tot
Sensitivity=TruP/TotP # Proportion of correct positives
Specificity=TruN/TotN # Proportion of correct negatives
FalPos = 1 - Specificity
print(c("Accuracy"=Accuracy,
"Error"=Error,
"Sensitivity"=Sensitivity,
"Specificity"=Specificity,
"False Positives"=FalPos), digits=2) # Prints fewer digits
lda.rates <- c("Accuracy"=Accuracy,
"Error"=Error,
"Sensitivity"=Sensitivity,
"Specificity"=Specificity,
"False Positives"=FalPos)
pred <- prediction(preds,churn$Churn[-train])
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=T)
auc <- performance(pred,"auc")
c(auc@y.name[[1]], auc@y.values[[1]])
set.seed(123)
churn.rf <- randomForest(as.factor(Churn) ~ SeniorCitizen + tenure + MultipleLines + InternetService + Contract + PaperlessBilling + PaymentMethod + TotalCharges,
data = churn[train,],
importance=T,
mtry=8)
plot(churn.rf)
varImpPlot(churn.rf)
importance(churn.rf)
# Learned how to produce probabilites from trees here: https://stackoverflow.com/questions/64651101/is-there-a-way-to-change-threshold-of-a-classification-within-a-model-in-caret-r
preds <- predict(churn.rf,churn[-train,], type = "prob")[,2]
preds <- ifelse(probs>0.35, 1, 0)
conf.mat <- table(preds, churn$Churn[-train])
TruN=conf.mat[1,1] # True negatives, row 1 col 1
TruP=conf.mat[2,2] # True positives, row 2 col 2
FalP=conf.mat[2,1] # False positives, etc.
FalN=conf.mat[1,2] # False negatives
TotN=conf.mat[1,1] + conf.mat[2,1] # Total negatives
TotP=conf.mat[1,2] + conf.mat[2,2] # Total positives
Tot=TotN+TotP # Matrix total
Accuracy=(TruN+TruP)/Tot
Error=(FalN+FalP)/Tot
Sensitivity=TruP/TotP # Proportion of correct positives
Specificity=TruN/TotN # Proportion of correct negatives
FalPos = 1 - Specificity
print(c("Accuracy"=Accuracy,
"Error"=Error,
"Sensitivity"=Sensitivity,
"Specificity"=Specificity,
"False Positives"=FalPos), digits=2) # Prints fewer digits
rf.rates <- c("Accuracy"=Accuracy,
"Error"=Error,
"Sensitivity"=Sensitivity,
"Specificity"=Specificity,
"False Positives"=FalPos)
# convert preds to numeric
preds <- ifelse(as.character(preds) == '0',0,1)
pred <- prediction(preds,churn$Churn[-train])
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=T)
auc <- performance(pred,"auc")
c(auc@y.name[[1]], auc@y.values[[1]])
round(rbind(logreg.linear.rates,lda.rates,rf.rates),5)
pwd()
